1
00:00:00,000 --> 00:00:04,950
[MUSIC PLAYING]  STEFAN RITTER: Hi guys.

2
00:00:04,950 --> 00:00:07,770
I'm Stefan, and I'm working on multiple projects  at the moment.

3
00:00:07,770 --> 00:00:12,240
One is buzzr.io, one is fitguru.org,  and one is pickfeed.io.

4
00:00:12,240 --> 00:00:17,830
And today I'm going to talk about how I use a common code  base to pivot to all these different ideas.
今天我将讨论如何用一般代码基础去以所有不同的观点为中心转移。

5
00:00:17,830 --> 00:00:23,300
While working on different startup ideas,  I quickly realized there are common parts to each idea.
当在研究不同的创业主意时，我很快发现了每个主意都有共同的地方。

6
00:00:23,300 --> 00:00:29,320
So I created an abstraction called emptyApp,  which combines these five features that I singled out.

7
00:00:29,320 --> 00:00:52,720
The five features are a landing page with an email sign up so  you can go online right away and start collecting emails  from people who are interested, a client-agnostic API  server that doesn't care if the front-end is a web  app or a mobile app, and then a front-end app, which  for me usually is the web app, since I think the web is  the biggest [INAUDIBLE] platform,  and then a user model, since you need to save your users.

8
00:00:52,720 --> 00:00:57,560
And the fifth thing would be a login authentication scheme  with Twitter, Facebook, G+, or email.
[看不懂]  And the fifth thing would be a login authentication scheme  with Twitter, Facebook, G+, or email. 不会翻译.

9
00:00:57,560 --> 00:01:02,550
Let's look at the five features in emptyApp  as they come from the repo when your freshly install it.

10
00:01:02,550 --> 00:01:12,710
So this is emptyApp's landing page  where you can collect users' email addresses who  might be interested until you launch.

11
00:01:12,710 --> 00:01:24,640
So if you just enter an email address here,  you can link it up to a Mailchimp list  and collect email addresses that way.


12
00:01:24,640 --> 00:01:29,530
But then emptyApp also gives you real login functionality.

13
00:01:29,530 --> 00:01:42,980
So for example, if we try to log on like this,  this user doesn't exist.

14
00:01:42,980 --> 00:01:45,660
So obviously we get an error message.

15
00:01:45,660 --> 00:01:56,210
But then if we go to Join, we can create this user.

16
00:01:56,210 --> 00:01:58,340
And then now you're logged in.

17
00:01:58,340 --> 00:02:04,130
So if we try to go back to the homepage,  emptyApp will automatically log you back in.

18
00:02:04,130 --> 00:02:06,950
And you're landing on the logged in home page.

19
00:02:06,950 --> 00:02:09,474
There's also a logged out future.

20
00:02:09,474 --> 00:02:13,680
So you can just log out again, and you're back  logged out on the home page.

21
00:02:13,680 --> 00:02:18,010
And then, of course, you can do all this as well with  all the social media logins.

22
00:02:18,010 --> 00:02:19,426
So here we have Twitter activated.

23
00:02:19,426 --> 00:02:27,857
And then we log back in.
然后我们登录了

24
00:02:27,857 --> 00:02:30,440
All right, now I'm going to show you these features in action.
好的，我现在给你看这些功能。

25
00:02:30,440 --> 00:02:40,450
So if we go to buzzr.io, you can see when you first  land on the app there's a landing page.
I don`t know how to translate this sentence.Thanks.

26
00:02:40,450 --> 00:02:46,400
But then over here you see we have links  to the Join, links to the Login.

27
00:02:46,400 --> 00:02:48,945
And once we're here, we can log in with our user account.

28
00:02:48,945 --> 00:02:58,700
And we land on the logged in home page.

29
00:02:58,700 --> 00:03:02,930
All right, now let me show you what  the emptyApp looks like on GitHub.

30
00:03:02,930 --> 00:03:14,862
So if you go to my username, stefanritter/emptyapp--  so there's a link right here so you can download and clone  the app.

31
00:03:14,862 --> 00:03:17,070
There are little instructions on how to do the setup.

32
00:03:17,070 --> 00:03:25,920
So it comes with a Grunt file, as well as  scripts to do the testing and a supervisor script  to watch for server changes.

33
00:03:25,920 --> 00:03:34,930
So if you download the app, and then you want to start it,  what you do is you CD into the emptyApp directory.

34
00:03:34,930 --> 00:03:37,960
And then you just run the start script.

35
00:03:37,960 --> 00:03:43,870
And what it will do is start all the tests, the Grunt watching.

36
00:03:43,870 --> 00:03:52,140
And from that point on, you can demo the app  on your local host.

37
00:03:52,140 --> 00:03:56,130
It's a MongoDB database, so the whole app  is written in JavaScript.

38
00:03:56,130 --> 00:03:58,460
All my apps are written 100% in JavaScript.

39
00:03:58,460 --> 00:04:03,120
Because you can use JavaScript on the front-end,  on the back-end, as well as to talk to your database.

40
00:04:03,120 --> 00:04:05,570
So there's less mental overhead.

41
00:04:05,570 --> 00:04:08,410
For the database, I use MongoDB.

42
00:04:08,410 --> 00:04:16,779
MongoDB is schemaless, so you can change fields on models  very quickly, which is very important when you're pivoting  between extreme different ideas.

43
00:04:16,779 --> 00:04:20,589
For the front-end, I use AngularJS,  which has awesome dependency injection.

44
00:04:20,589 --> 00:04:27,310
So it's very easy to throw around features  within your app-- also, again, important  when you're changing and pivoting ideas.

45
00:04:27,310 --> 00:04:33,870
And then for the server, I use Happy.js,  which is a server built specifically  for being an API server.

46
00:04:33,870 --> 00:04:38,810
So it's very great to be a front-end-agnostic server  back-end.

47
00:04:38,810 --> 00:04:39,860
This is the Grunt task.

48
00:04:39,860 --> 00:04:46,610
The Grunt task just watches for file changes and checks  the code and tells you if something's  wrong and runs all your tests.

49
00:04:46,610 --> 00:04:51,710
This is the Karma tab, which runs all the front-end tasks.

50
00:04:51,710 --> 00:04:57,970
And then this is the Server tab, which  watches for changes in server code  and restarts the server if it finds any.

51
00:04:57,970 --> 00:05:01,870
This is what the folder structure  looks like of the code.

52
00:05:01,870 --> 00:05:04,364
There are three main folders for you to watch out for.

53
00:05:04,364 --> 00:05:07,870
There is the Client folder, the Server folder,  and the Test folder.

54
00:05:07,870 --> 00:05:11,187
It's quite self explanatory what each includes.

55
00:05:11,187 --> 00:05:15,270
But it's important to point out that the client and the server  are completely separate.

56
00:05:15,270 --> 00:05:23,085
So this is the client-agnostic API server  I talked about previously where the client could  be, in this case, an AngularJS app.

57
00:05:23,085 --> 00:05:29,330
But it could also just be an iOS app or an Android  app that talks to your server.

58
00:05:29,330 --> 00:05:43,710
And so what happens is if you change something here,  Grunt will monitor the change, and then  build the front-end code again and inject it into the server.

59
00:05:43,710 --> 00:05:47,232
So the server will serve the updated app for you.

60
00:05:47,232 --> 00:05:49,440
So the other thing we talked about is the user model.

61
00:05:49,440 --> 00:05:56,710
So if you look into the Server folder,  you can see it comes with just one model, which is the user.

62
00:05:56,710 --> 00:06:03,239
The user model comes with just the basic things  you need, like username, display name, email,  [INAUDIBLE], and passwords.

63
00:06:03,239 --> 00:06:04,780
The controllers are also very simple.

64
00:06:04,780 --> 00:06:09,550
Their authentication controller handles all the login stuff  that we previously looked at.

65
00:06:09,550 --> 00:06:14,400
There's a feed controller that simply  serves the logged in homepage.

66
00:06:14,400 --> 00:06:16,670
There's also a little bonus here.

67
00:06:16,670 --> 00:06:18,970
For real time chatting, there's a Socket.IO set up.

68
00:06:18,970 --> 00:06:29,580
So under Config, there's a little Socket.IO setup  where you can then send real time messages back and forth  to your clients.

69
00:06:29,580 --> 00:06:33,559
And so this is how I use my common code base  to create all these different ideas.

70
00:06:33,559 --> 00:06:34,850
You can check it out on GitHub.

71
00:06:34,850 --> 00:06:37,670
It's on my user name, and then the repo is called emptyApp.

72
00:06:37,670 --> 00:06:39,510
Thanks for watching.
感谢收看。（谢富杰23020102203982翻译）
